{"version":3,"sources":["assets/images/logo.svg","assets/images/blue-marker.svg","components/TopBar.js","constants.js","components/Register.js","components/Login.js","components/Gallery.js","components/CreatePostForm.js","components/CreatePostButton.js","components/AroundMarker.js","components/AroundMap.js","components/Home.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","TopBar","className","src","logo","alt","this","props","isLoggedIn","onClick","handleLogout","type","React","Component","API_ROOT","TOKEN_KEY","GEO_OPTIONS","enableHighAccuracy","maximumAge","timeout","POST_TYPE_VIDEO","POST_TYPE_UNKNOWN","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","message","success","history","push","catch","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","getFieldDecorator","labelCol","xs","span","sm","wrapperCol","onSubmit","Item","label","rules","required","hasFeedback","validator","Password","onBlur","offset","htmlType","Link","to","Register","Form","create","name","NormalLoginForm","stateText","handleLoginSucceed","prefix","style","color","placeholder","Login","Gallery","images","map","image","customOverlay","captionStyle","user","caption","wrapperStyle","backdropClosesModal","enableImageSelection","display","minHeight","width","border","overflow","backgroundColor","maxHeight","position","bottom","padding","fontSize","NormalCreatePostForm","normFile","Array","isArray","fileList","beforeUpload","valuePropName","getValueFromEvent","Dragger","CreatePostForm","CreatePostButton","visible","confirmLoading","showModal","handleOk","token","localStorage","getItem","parse","lat","lon","formData","FormData","set","Math","random","originFileObj","headers","Authorization","loadPostsByTopic","resetFields","handleCancel","getFormRef","formInstance","title","onOk","okText","onCancel","ref","AroundMarker","isOpen","handleToggle","prevState","post","url","location","isImagePost","customIcon","undefined","blueMarkerUrl","scaledSize","window","google","maps","Size","lng","onMouseOver","onMouseOut","icon","controls","NormalAroundMap","reloadMarker","center","getCenter","radius","getRadius","getMapRef","mapInstance","bounds","getBounds","ne","getNorthEast","right","LatLng","geometry","spherical","computeDistanceBetween","defaultZoom","defaultCenter","onDragEnd","onZoomChanged","posts","key","AroundMap","withScriptjs","withGoogleMap","TabPane","Tabs","Home","isLoadingGeoLocation","isLoadingPosts","topic","onSuccessLoadGeoLocation","coords","latitude","longitude","setItem","loadNearbyPosts","onFailedLoadGeoLocation","range","json","handleTopicChange","loadFacesAroundTheWolrd","navigator","geolocation","getCurrentPosition","filter","thumbnail","thumbnailWidth","thumbnailHeight","gutter","includes","tip","length","renderImagePosts","renderVideoPosts","operations","Group","onChange","tabBarExtraContent","tab","renderPosts","googleMapURL","loadingElement","height","containerElement","mapElement","Main","getLogin","Redirect","getHome","Switch","Route","exact","path","render","component","App","Boolean","removeItem","hostname","match","ReactDOM","BrowserRouter","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,yC,yOCI9BC,EAAb,iLAEQ,OACI,4BAAQC,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,0BAAMH,UAAU,aAAhB,UACCI,KAAKC,MAAMC,WACR,uBAAGN,UAAU,SAASO,QAASH,KAAKC,MAAMG,cACtC,kBAAC,IAAD,CAAMC,KAAK,WAAW,IAD1B,UAEO,UAT3B,GAA4BC,IAAMC,W,4CCJrBC,EAAW,0CACXC,EAAY,YACZC,EAAc,CACvBC,oBAAoB,EACpBC,WAAoB,IACpBC,QAAoB,MAKXC,EAAkB,QAClBC,EAAoB,UCN3BC,E,2MACFC,MAAQ,CACJC,cAAc,EACdC,mBAAoB,I,EAGxBC,aAAe,SAAAC,GACXA,EAAEC,iBACF,EAAKrB,MAAMsB,KAAKC,gBAAe,SAACC,EAAKC,GAC5BD,IACDE,QAAQC,IAAI,4BAA6BF,GACzCG,MAAM,GAAD,OAAIrB,EAAJ,WAAuB,CACxBsB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,SAAUR,EAAOQ,SACjBC,SAAUT,EAAOS,aAGpBC,MAAK,SAACC,GACH,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAMH,EAASI,eAE5BL,MAAK,SAACM,GACHf,QAAQC,IAAIc,GACZC,IAAQC,QAAQ,yBAChB,EAAK3C,MAAM4C,QAAQC,KAAK,aAE3BC,OAAM,SAACtB,GACJE,QAAQqB,MAAMvB,GACdkB,IAAQK,MAAM,gC,EAMlCC,kBAAoB,SAAA5B,GAAM,IACd6B,EAAU7B,EAAE8B,OAAZD,MACR,EAAKE,SAAS,CAAElC,aAAc,EAAKD,MAAMC,gBAAkBgC,K,EAG/DG,uBAAyB,SAACC,EAAMJ,EAAOK,GAAc,IACzChC,EAAS,EAAKtB,MAAdsB,KACJ2B,GAASA,IAAU3B,EAAKiC,cAAc,YACtCD,EAAS,iDAETA,K,EAIRE,uBAAyB,SAACH,EAAMJ,EAAOK,GAAc,IACzChC,EAAS,EAAKtB,MAAdsB,KACJ2B,GAAS,EAAKjC,MAAMC,cACpBK,EAAKC,eAAe,CAAC,WAAY,CAAEkC,OAAO,IAE9CH,K,wEAGM,IACEI,EAAsB3D,KAAKC,MAAMsB,KAAjCoC,kBAyBR,OACI,kBAAC,IAAD,iBAxBmB,CACnBC,SAAU,CACNC,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,IAEhBE,WAAY,CACRH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAiBhB,CAA0BG,SAAUjE,KAAKoB,aAAcxB,UAAU,aAC7D,kBAAC,IAAKsE,KAAN,CACIC,MAAM,YAELR,EAAkB,WAAY,CAC3BS,MAAO,CAAC,CAAEC,UAAU,EAAM1B,QAAS,iCADtCgB,CAEE,kBAAC,IAAD,QAEP,kBAAC,IAAKO,KAAN,CAAWC,MAAM,WAAWG,aAAW,GAClCX,EAAkB,WAAY,CAC3BS,MAAO,CACH,CACIC,UAAU,EACV1B,QAAS,+BAEb,CACI4B,UAAWvE,KAAKyD,0BAP3BE,CAUE,kBAAC,IAAMa,SAAP,QAEP,kBAAC,IAAKN,KAAN,CAAWC,MAAM,mBAAmBG,aAAW,GAC1CX,EAAkB,UAAW,CAC1BS,MAAO,CACH,CACIC,UAAU,EACV1B,QAAS,iCAEb,CACI4B,UAAWvE,KAAKqD,0BAP3BM,CAUE,kBAAC,IAAMa,SAAP,CAAgBC,OAAQzE,KAAKiD,sBAEpC,kBAAC,IAAKiB,KAhDa,CACvBF,WAAY,CACRH,GAAI,CACAC,KAAM,GACNY,OAAQ,GAEZX,GAAI,CACAD,KAAM,GACNY,OAAQ,KAyCR,kBAAC,IAAD,CAAQrE,KAAK,UAAUsE,SAAS,UAAhC,YAGA,oEAAyC,kBAACC,EAAA,EAAD,CAAMC,GAAG,UAAT,gB,GA5H9BvE,IAAMC,WAmIxBuE,EAAWC,IAAKC,OAAO,CAAEC,KAAM,YAApBF,CAAkC/D,GCnIpDkE,E,2MACF9D,aAAe,SAAAC,GACXA,EAAEC,iBACF,EAAKrB,MAAMsB,KAAKC,gBAAe,SAACC,EAAKC,GAC5BD,IACDE,QAAQC,IAAI,4BAA6BF,GACzCG,MAAM,GAAD,OAAIrB,EAAJ,UAAsB,CACvBsB,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,SAAUR,EAAOQ,SACjBC,SAAUT,EAAOS,aAGpBC,MAAK,SAACC,GACH,GAAIA,EAASC,GACT,OAAOD,EAASE,OAEpB,MAAM,IAAIC,MAAMH,EAAS8C,cAE5B/C,MAAK,SAACM,GACHf,QAAQC,IAAIc,GACZ,EAAKzC,MAAMmF,mBAAmB1C,GAC9BC,IAAQC,QAAQ,qBAEnBG,OAAM,SAACtB,GACJE,QAAQqB,MAAMvB,GACdkB,IAAQK,MAAM,yB,wEAMxB,IACEW,EAAsB3D,KAAKC,MAAMsB,KAAjCoC,kBACR,OACI,kBAAC,IAAD,CAAMM,SAAUjE,KAAKoB,aAAcxB,UAAU,cACzC,kBAAC,IAAKsE,KAAN,KACKP,EAAkB,WAAY,CAC3BS,MAAO,CAAC,CAAEC,UAAU,EAAM1B,QAAS,iCADtCgB,CAGG,kBAAC,IAAD,CACI0B,OAAQ,kBAAC,IAAD,CAAMhF,KAAK,OAAOiF,MAAO,CAAEC,MAAO,qBAC1CC,YAAY,eAIxB,kBAAC,IAAKtB,KAAN,KACKP,EAAkB,WAAY,CAC3BS,MAAO,CAAC,CAAEC,UAAU,EAAM1B,QAAS,iCADtCgB,CAGG,kBAAC,IAAD,CACI0B,OAAQ,kBAAC,IAAD,CAAMhF,KAAK,OAAOiF,MAAO,CAAEC,MAAO,qBAC1ClF,KAAK,WACLmF,YAAY,eAIxB,kBAAC,IAAKtB,KAAN,KACI,kBAAC,IAAD,CAAQ7D,KAAK,UAAUsE,SAAS,SAAS/E,UAAU,qBAAnD,UADJ,MAIO,kBAACgF,EAAA,EAAD,CAAMC,GAAG,aAAT,uB,GA7DOvE,IAAMC,WAoEvBkF,EAAQV,IAAKC,OAAO,CAAEC,KAAM,gBAApBF,CAAsCG,G,wECrE9CQ,EAAb,iLAeQ,IAAMC,EAAS3F,KAAKC,MAAM0F,OAAOC,KAAI,SAACC,GAClC,OAAO,eACAA,EADP,CAEIC,cACI,yBAAKR,MAAOS,GACR,uCAASF,EAAMG,KAAf,aAAwBH,EAAMI,gBAM9C,OACI,yBAAKX,MAAOY,GACR,kBAAC,IAAD,CACIC,qBAAmB,EACnBR,OAAQA,EACRS,sBAAsB,SA/B1C,GAA6B7F,aAsCvB2F,EAAe,CACjBG,QAAS,QACTC,UAAW,MACXC,MAAO,OACPC,OAAQ,iBACRC,SAAU,QAGRV,EAAe,CACjBW,gBAAiB,qBACjBC,UAAW,QACXF,SAAU,SACVG,SAAU,WACVC,OAAQ,IACRN,MAAO,OACPhB,MAAO,QACPuB,QAAS,MACTC,SAAU,O,kBCxDRC,E,2MACFC,SAAW,SAAA5F,GAEP,OADAM,QAAQC,IAAI,gBAAiBP,GACzB6F,MAAMC,QAAQ9F,GACPA,EAEJA,GAAKA,EAAE+F,U,EAGlBC,aAAe,kBAAM,G,wEAEX,IACE1D,EAAsB3D,KAAKC,MAAMsB,KAAjCoC,kBAKR,OACI,kBAAC,IALkB,CACnBC,SAAU,CAAEE,KAAM,GAClBE,WAAY,CAAEF,KAAM,KAIhB,kBAAC,IAAKI,KAAN,CAAWC,MAAM,WACZR,EAAkB,UAAW,CAC1BS,MAAO,CAAC,CAAEC,UAAU,EAAM1B,QAAS,2BADtCgB,CAEE,kBAAC,IAAD,QAEP,kBAAC,IAAKO,KAAN,CAAWC,MAAM,eACb,yBAAKvE,UAAU,WACV+D,EAAkB,QAAS,CACxB2D,cAAe,WACfC,kBAAmBvH,KAAKiH,SACxB7C,MAAO,CAAC,CAAEC,UAAU,EAAM1B,QAAS,6BAHtCgB,CAKG,kBAAC,IAAO6D,QAAR,CAAgBvC,KAAK,QAAQoC,aAAcrH,KAAKqH,cAC5C,uBAAGzH,UAAU,wBACT,kBAAC,IAAD,CAAMS,KAAK,WAEf,uBAAGT,UAAU,mBAAb,6CACA,uBAAGA,UAAU,mBAAb,iD,GApCGU,IAAMC,WA8C5BkH,EAAiB1C,IAAKC,QAALD,CAAciC,GC5C/BU,EAAb,2MACIzG,MAAQ,CACJ0G,SAAS,EACTC,gBAAgB,GAHxB,EAMIC,UAAY,WACR,EAAKzE,SAAS,CACVuE,SAAS,KARrB,EAYIG,SAAW,WACP,EAAKvG,KAAKC,gBAAe,SAACC,EAAKC,GAE3B,GADAC,QAAQC,IAAIF,IACPD,EAAK,CACN,IAAMsG,EAAQC,aAAaC,QAAQxH,GAD7B,EAEeuB,KAAKkG,MAAMF,aAAaC,QLftC,YKeCE,EAFF,EAEEA,IAAKC,EAFP,EAEOA,IAEPC,EAAW,IAAIC,SACrBD,EAASE,IAAI,MAAOJ,ELbX,IKaiBK,KAAKC,SAAuB,ELb7C,KKcTJ,EAASE,IAAI,MAAOH,ELdX,IKciBI,KAAKC,SAAuB,ELd7C,KKeTJ,EAASE,IAAI,UAAW7G,EAAOiB,SAC/B0F,EAASE,IAAI,QAAS7G,EAAOmE,MAAM,GAAG6C,eAEtC,EAAKtF,SAAS,CAAEwE,gBAAgB,IAChC/F,MAAM,GAAD,OAAIrB,EAAJ,SAAqB,CACtBsB,OAAQ,OACR6G,QAAS,CACLC,cAAc,GAAD,OL1BV,SK0BU,YAAoBb,IAErChG,KAAMsG,IAELjG,MAAK,SAACC,GACH,GAAIA,EAASC,GACT,OAAO,EAAKrC,MAAM4I,mBAEtB,MAAM,IAAIrG,MAAM,6BAEnBJ,MAAK,WACF,EAAKgB,SAAS,CAAEuE,SAAS,EAAOC,gBAAgB,IAChD,EAAKrG,KAAKuH,cACVnG,IAAQC,QAAQ,iCAEnBG,OAAM,SAAC1B,GACJM,QAAQqB,MAAM3B,GACdsB,IAAQK,MAAM,0BACd,EAAKI,SAAS,CAAEwE,gBAAgB,YA/CxD,EAqDImB,aAAe,WACXpH,QAAQC,IAAI,yBACZ,EAAKwB,SAAS,CACVuE,SAAS,KAxDrB,EA4DIqB,WAAa,SAACC,GACV,EAAK1H,KAAO0H,GA7DpB,wEAgEc,IAAD,EAC+BjJ,KAAKiB,MAAjC0G,EADH,EACGA,QAASC,EADZ,EACYA,eACjB,OACI,6BACI,kBAAC,IAAD,CAAQvH,KAAK,UAAUF,QAASH,KAAK6H,WAArC,mBAGA,kBAAC,IAAD,CACIqB,MAAM,kBACNvB,QAASA,EACTwB,KAAMnJ,KAAK8H,SACXsB,OAAO,SACPxB,eAAgBA,EAChByB,SAAUrJ,KAAK+I,cAEf,kBAACtB,EAAD,CAAgB6B,IAAKtJ,KAAKgJ,mBA/E9C,GAAsC1I,IAAMC,W,0BCA/BgJ,EAAb,2MAKItI,MAAQ,CACJuI,QAAQ,GANhB,EASIC,aAAe,WACX,EAAKrG,UAAS,SAACsG,GAAD,MAAgB,CAAEF,QAASE,EAAUF,YAV3D,wEAac,IAAD,EAC0CxJ,KAAKC,MAAM0J,KAAlD3D,EADH,EACGA,KAAMrD,EADT,EACSA,QAASiH,EADlB,EACkBA,IAAKC,EADvB,EACuBA,SAAUxJ,EADjC,EACiCA,KAC9B8H,EAAa0B,EAAb1B,IAAKC,EAAQyB,EAARzB,IACP0B,EAAuB,UAATzJ,EACd0J,EAAaD,OAAcE,EAAY,CACzCJ,IAAKK,IACLC,WAAY,IAAIC,OAAOC,OAAOC,KAAKC,KAAK,GAAI,KAEhD,OACI,kBAAC,SAAD,CACI1D,SAAU,CAAEuB,MAAKoC,IAAKnC,GACtBoC,YAAaV,EAAc9J,KAAKyJ,kBAAeO,EAC/CS,WAAYX,EAAc9J,KAAKyJ,kBAAeO,EAC9C7J,QAAS2J,OAAcE,EAAWhK,KAAKyJ,aACvCiB,KAAMX,GAEL/J,KAAKiB,MAAMuI,OACR,kBAAC,aAAD,KACI,6BACKM,EACK,yBAAKjK,IAAK+J,EAAK7J,IAAK4C,EAAS/C,UAAU,wBACvC,2BAAOC,IAAK+J,EAAKe,UAAQ,EAAC/K,UAAU,wBAC1C,qCAAOoG,EAAP,aAAgBrD,MAGxB,UAtCpB,GAAkCrC,IAAMC,WCIlCqK,E,2MACFC,aAAe,WACX,IAAMC,EAAS,EAAKC,YACdC,EAAS,EAAKC,YACpB,EAAKhL,MAAM4I,iBAAiBiC,EAAQE,I,EAmBxCE,UAAY,SAACC,GACT,EAAKvF,IAAMuF,EACXhB,OAAOvE,IAAMuF,G,2EAjBb,IAAML,EAAS9K,KAAK4F,IAAImF,YACxB,MAAO,CAAE5C,IAAK2C,EAAO3C,MAAOC,IAAK0C,EAAOP,S,kCAIxC,IAAMO,EAAS9K,KAAK4F,IAAImF,YAClBK,EAASpL,KAAK4F,IAAIyF,YACxB,GAAIP,GAAUM,EAAQ,CAClB,IAAME,EAAKF,EAAOG,eACZC,EAAQ,IAAIrB,OAAOC,OAAOC,KAAKoB,OAAOX,EAAO3C,MAAOmD,EAAGf,OAC7D,MAAO,KAAQJ,OAAOC,OAAOC,KAAKqB,SAASC,UAAUC,uBAAuBd,EAAQU,M,+BAUlF,IAAD,EACgBxJ,KAAKkG,MAAMF,aAAaC,QP/B9B,YO+BPE,EADH,EACGA,IAAKC,EADR,EACQA,IACb,OACI,kBAAC,YAAD,CACIkB,IAAKtJ,KAAKkL,UACVW,YAAa,GACbC,cAAe,CAAE3D,MAAKoC,IAAKnC,GAC3B2D,UAAW/L,KAAK6K,aAChBmB,cAAehM,KAAK6K,cAEnB7K,KAAKC,MAAMgM,MAAMrG,KAAI,SAAC+D,GAAD,OAAU,kBAAC,EAAD,CAAcA,KAAMA,EAAMuC,IAAKvC,EAAKC,c,GAtCtDtJ,IAAMC,WA4CvB4L,EAAYC,uBAAaC,wBAAczB,ICnC5C0B,EAAYC,IAAZD,QAEKE,EAAb,2MACIvL,MAAQ,CACJwL,sBAAsB,EACtBC,gBAAgB,EAChB1J,MAAO,GACPiJ,MAAO,GACPU,MRboB,UQO5B,EAsBIC,yBAA2B,SAAChG,GACxBjF,QAAQC,IAAIgF,GADyB,MAELA,EAASiG,OAAjCC,EAF6B,EAE7BA,SAAUC,EAFmB,EAEnBA,UAClB/E,aAAagF,QRtCE,UQsCehL,KAAKC,UAAU,CAAEkG,IAAK2E,EAAU1E,IAAK2E,KACnE,EAAK3J,SAAS,CAAEqJ,sBAAsB,EAAOzJ,MAAO,KACpD,EAAKiK,mBA3Bb,EA8BIC,wBAA0B,WACtB,EAAK9J,SAAS,CAAEqJ,sBAAsB,EAAOzJ,MAAO,kCA/B5D,EAkCIiK,gBAAkB,SAACnC,EAAQE,GAAY,IAAD,EACbF,GAAkB9I,KAAKkG,MAAMF,aAAaC,QRhDhD,YQgDPE,EAD0B,EAC1BA,IAAKC,EADqB,EACrBA,IACP+E,EAAQnC,GAAkB,GAC1BjD,EAAQC,aAAaC,QAAQxH,GAEnC,OADA,EAAK2C,SAAS,CAAEsJ,gBAAgB,EAAM1J,MAAO,KACtCnB,MAAM,GAAD,OAAIrB,EAAJ,uBAA2B2H,EAA3B,gBAAsCC,EAAtC,kBAAmD+E,GAAS,CACpErL,OAAQ,MACR6G,QAAS,CACLC,cAAc,GAAD,ORtDF,SQsDE,YAAoBb,MAGpC3F,MAAK,SAACC,GACH,GAAIA,EAASC,GACT,OAAOD,EAAS+K,OAEpB,MAAM,IAAI5K,MAAM,4BAEnBJ,MAAK,SAACM,GACHf,QAAQC,IAAIc,GACZ,EAAKU,SAAS,CAAE6I,MAAOvJ,GAAc,GAAIgK,gBAAgB,OAE5D3J,OAAM,SAAC1B,GACJM,QAAQqB,MAAM3B,GACd,EAAK+B,SAAS,CAAEsJ,gBAAgB,EAAO1J,MAAO3B,EAAEsB,cAzDhE,EA+GI0K,kBAAoB,SAAChM,GACjB,IAAMsL,EAAQtL,EAAE8B,OAAOD,MACvB,EAAKE,SAAS,CAAEuJ,URxHI,WQyHhBA,EACA,EAAKM,kBAEL,EAAKK,2BArHjB,EAyHIA,wBAA0B,WACtB,IAAMvF,EAAQC,aAAaC,QAAQxH,GAEnC,OADA,EAAK2C,SAAS,CAAEsJ,gBAAgB,EAAM1J,MAAO,KACtCnB,MAAM,GAAD,OAAIrB,EAAJ,sBAAkC,CAC1CsB,OAAQ,MACR6G,QAAS,CACLC,cAAc,GAAD,OR3IF,SQ2IE,YAAoBb,MAGpC3F,MAAK,SAACC,GACH,GAAIA,EAASC,GACT,OAAOD,EAAS+K,OAEpB,MAAM,IAAI5K,MAAM,2BAEnBJ,MAAK,SAACM,GACHf,QAAQC,IAAIc,GACZ,EAAKU,SAAS,CAAE6I,MAAOvJ,GAAc,GAAIgK,gBAAgB,OAE5D3J,OAAM,SAAC1B,GACJM,QAAQqB,MAAM3B,GACd,EAAK+B,SAAS,CAAEsJ,gBAAgB,EAAQ1J,MAAO3B,EAAEsB,cA9IjE,EAkJIkG,iBAAmB,SAACiC,EAAQE,GACxB,MR1JoB,WQ0JhB,EAAK/J,MAAM0L,MACJ,EAAKM,gBAAgBnC,EAAQE,GAE7B,EAAKsC,2BAtJxB,mFAUY,gBAAiBC,WACjBvN,KAAKoD,SAAS,CAAEqJ,sBAAsB,EAAMzJ,MAAO,KACnDuK,UAAUC,YAAYC,mBAClBzN,KAAK4M,yBACL5M,KAAKkN,wBACLxM,IAGJV,KAAKoD,SAAS,CAAEJ,MAAO,oCAlBnC,yCA6DwB,IAEV2C,EADY3F,KAAKiB,MAAfgL,MAEHyB,QAAO,SAAC/D,GAAD,MR3EW,UQ2EDA,EAAKtJ,QACtBuF,KAAI,SAAC+D,GACF,MAAO,CACH3D,KAAM2D,EAAK3D,KACXnG,IAAK8J,EAAKC,IACV+D,UAAWhE,EAAKC,IAChB3D,QAAS0D,EAAKhH,QACdiL,eAAgB,IAChBC,gBAAiB,QAG7B,OAAO,kBAAC,EAAD,CAASlI,OAAQA,MA3EhC,yCA8EwB,IACRsG,EAAUjM,KAAKiB,MAAfgL,MACR,OACI,kBAAC,IAAD,CAAK6B,OAAQ,IAEL7B,EACKyB,QAAO,SAAC/D,GAAD,MAAU,CAAC7I,EAAiBC,GAAmBgN,SAASpE,EAAKtJ,SACpEuF,KAAI,SAAC+D,GAAD,OACD,kBAAC,IAAD,CAAK7F,KAAM,EAAGoI,IAAKvC,EAAKC,KACpB,2BAAO/J,IAAK8J,EAAKC,IAAKe,UAAU,EAAM/K,UAAU,gBAChD,2BAAI+J,EAAK3D,KAAT,KAAiB2D,EAAKhH,gBAxFtD,kCAgGgBtC,GAAO,IAAD,EACiDL,KAAKiB,MAA5D+B,EADM,EACNA,MAAOyJ,EADD,EACCA,qBAAsBC,EADvB,EACuBA,eAAgBT,EADvC,EACuCA,MACrD,OAAIjJ,IAEOyJ,EACA,kBAAC,IAAD,CAAMuB,IAAI,4BACVtB,EACA,kBAAC,IAAD,CAAMsB,IAAI,qBACV/B,EAAMgC,OAAS,ERnHH,UQoHZ5N,EAA2BL,KAAKkO,mBAAqBlO,KAAKmO,mBAE1D,qBA3GnB,+BA2JQ,IAAMC,EACF,kBAAC,EAAD,CAAkBvF,iBAAkB7I,KAAK6I,mBAE7C,OACI,6BACI,kBAAC,IAAMwF,MAAP,CAAaC,SAAUtO,KAAKqN,kBAAmBnK,MAAOlD,KAAKiB,MAAM0L,OAC7D,kBAAC,IAAD,CAAOzJ,MRxKC,UQwKR,mBACA,kBAAC,IAAD,CAAOA,MRxKD,QQwKN,2BAEJ,kBAAC,IAAD,CAAMqL,mBAAoBH,EAAYxO,UAAU,aAC5C,kBAAC0M,EAAD,CAASkC,IAAI,cAActC,IAAI,KAC1BlM,KAAKyO,YRjLC,UQmLX,kBAACnC,EAAD,CAASkC,IAAI,cAActC,IAAI,KAC1BlM,KAAKyO,YAAY3N,IAEtB,kBAACwL,EAAD,CAASkC,IAAI,MAAMtC,IAAI,KACnB,kBAACC,EAAD,CACIuC,aAAa,gIACbC,eAAgB,yBAAKrJ,MAAO,CAAEsJ,OAAO,UACrCC,iBAAkB,yBAAKvJ,MAAO,CAAEsJ,OAAO,WACvCE,WAAY,yBAAKxJ,MAAO,CAAEsJ,OAAO,UACjC3C,MAAOjM,KAAKiB,MAAMgL,MAClBpD,iBAAkB7I,KAAK6I,0BAlLnD,GAA0BvI,IAAMC,W,8BCdnBwO,GAAb,2MACIC,SAAW,WACP,OAAO,EAAK/O,MAAMC,WAAa,kBAAC+O,GAAA,EAAD,CAAUpK,GAAG,UAAY,kBAACY,EAAD,CAAOL,mBAAoB,EAAKnF,MAAMmF,sBAFtG,EAKI8J,QAAU,WACN,OAAO,EAAKjP,MAAMC,WAAa,kBAAC,EAAD,MAAU,kBAAC+O,GAAA,EAAD,CAAUpK,GAAG,YAN9D,wEASQ,OACI,yBAAKjF,UAAU,QACX,kBAACuP,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQvP,KAAKgP,WACnC,kBAACI,GAAA,EAAD,CAAOE,KAAK,SAASC,OAAQvP,KAAKgP,WAClC,kBAACI,GAAA,EAAD,CAAOE,KAAK,YAAYE,UAAW1K,IACnC,kBAACsK,GAAA,EAAD,CAAOE,KAAK,QAAQC,OAAQvP,KAAKkP,UACjC,kBAACE,GAAA,EAAD,CAAOG,OAAQvP,KAAKgP,iBAhBxC,GAA0B1O,IAAMC,WC0BjBkP,I,kNAxBXxO,MAAQ,CACJf,WAAYwP,QAAQ1H,aAAaC,QAAQxH,K,EAG7C2E,mBAAqB,SAAC2C,GAClBC,aAAagF,QAAQvM,EAAWsH,GAChC,EAAK3E,SAAS,CAAElD,YAAY,K,EAGhCE,aAAe,WACX4H,aAAa2H,WAAWlP,GACxB,EAAK2C,SAAS,CAAElD,YAAY,K,wEAI5B,OACI,yBAAKN,UAAU,OACX,kBAAC,EAAD,CAAQQ,aAAcJ,KAAKI,aAAcF,WAAYF,KAAKiB,MAAMf,aAChE,kBAAC,GAAD,CAAMkF,mBAAoBpF,KAAKoF,mBAAoBlF,WAAYF,KAAKiB,MAAMf,kB,GAnBxEI,IAAMC,YCKJmP,QACW,cAA7BvF,OAAON,SAAS+F,UAEe,UAA7BzF,OAAON,SAAS+F,UAEhBzF,OAAON,SAAS+F,SAASC,MACvB,2D,cCXNC,IAASP,OACL,kBAACQ,GAAA,EAAD,KACI,kBAAC,GAAD,OAELC,SAASC,eAAe,SDwHrB,kBAAmB1C,WACrBA,UAAU2C,cAAcC,MAAM/N,MAAK,SAAAgO,GACjCA,EAAaC,kB","file":"static/js/main.ff57c3b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/blue-marker.13cf803d.svg\";","import React from 'react';\nimport logo from '../assets/images/logo.svg';\nimport { Icon } from 'antd';\n\nexport class TopBar extends React.Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <span className=\"App-title\">Around</span>\n                {this.props.isLoggedIn ?\n                    <a className=\"logout\" onClick={this.props.handleLogout} >\n                        <Icon type=\"logout\"/>{' '}Logout\n                    </a> : null}\n            </header>\n        );\n    }\n}","export const API_ROOT = 'https://around-75015.appspot.com/api/v1';\nexport const TOKEN_KEY = 'TOKEN_KEY';\nexport const GEO_OPTIONS = {\n    enableHighAccuracy: true,\n    maximumAge        : 300000,\n    timeout           : 27000,\n};\nexport const POS_KEY = 'POS_KEY';\nexport const AUTH_HEADER = 'Bearer';\nexport const POST_TYPE_IMAGE = 'image';\nexport const POST_TYPE_VIDEO = 'video';\nexport const POST_TYPE_UNKNOWN = 'unknown';\nexport const LOC_SHAKE = 0.02;\nexport const TOPIC_AROUND = 'around';\nexport const TOPIC_FACE = 'face';\n","import React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/signup`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.statusText);\n                    })\n                    .then((data) => {\n                        console.log(data);\n                        message.success('Registration succeed!');\n                        this.props.history.push('/login');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Registration failed.');\n                    });\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\n","import React from 'react';\nimport { Form, Icon, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass NormalLoginForm extends React.Component {\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/login`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.stateText);\n                    })\n                    .then((data) => {\n                        console.log(data);\n                        this.props.handleLoginSucceed(data);\n                        message.success('Login succeed!');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Login failed.');\n                    });\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Log in\n                    </Button>\n                    Or <Link to=\"/register\">register now!</Link>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Login = Form.create({ name: 'normal_login' })(NormalLoginForm);","import React, { Component }from 'react';\nimport PropTypes from 'prop-types';\nimport GridGallery from 'react-grid-gallery';\n\nexport class Gallery extends Component {\n    static propTypes = {\n        images: PropTypes.arrayOf(\n            PropTypes.shape({\n                user: PropTypes.string.isRequired,\n                src: PropTypes.string.isRequired,\n                thumbnail: PropTypes.string.isRequired,\n                caption: PropTypes.string,\n                thumbnailWidth: PropTypes.number.isRequired,\n                thumbnailHeight: PropTypes.number.isRequired\n            })\n        ).isRequired\n    }\n\n    render() {\n        const images = this.props.images.map((image) => {\n            return {\n                ...image,\n                customOverlay: (\n                    <div style={captionStyle}>\n                        <div>{`${image.user}: ${image.caption}`}</div>\n                    </div>\n                ),\n            };\n        });\n\n        return (\n            <div style={wrapperStyle}>\n                <GridGallery\n                    backdropClosesModal\n                    images={images}\n                    enableImageSelection={false}/>\n            </div>\n        );\n    }\n}\n\n\nconst wrapperStyle = {\n    display: \"block\",\n    minHeight: \"1px\",\n    width: \"100%\",\n    border: \"1px solid #ddd\",\n    overflow: \"auto\"\n};\n\nconst captionStyle = {\n    backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n    maxHeight: \"240px\",\n    overflow: \"hidden\",\n    position: \"absolute\",\n    bottom: \"0\",\n    width: \"100%\",\n    color: \"white\",\n    padding: \"2px\",\n    fontSize: \"90%\"\n};\n","import React from 'react';\nimport { Form, Input, Upload, Icon } from 'antd';\n\nclass NormalCreatePostForm extends React.Component {\n    normFile = e => {\n        console.log('Upload event:', e);\n        if (Array.isArray(e)) {\n            return e;\n        }\n        return e && e.fileList;\n    };\n\n    beforeUpload = () => false;\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const formItemLayout = {\n            labelCol: { span: 6 },\n            wrapperCol: { span: 14 },\n        };\n        return (\n            <Form {...formItemLayout}>\n                <Form.Item label=\"Message\">\n                    {getFieldDecorator('message', {\n                        rules: [{ required: true, message: 'Please input message.' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Image/Video\">\n                    <div className=\"dropbox\">\n                        {getFieldDecorator('image', {\n                            valuePropName: 'fileList',\n                            getValueFromEvent: this.normFile,\n                            rules: [{ required: true, message: 'Please select an image.' }]\n                        })(\n                            <Upload.Dragger name=\"files\" beforeUpload={this.beforeUpload}>\n                                <p className=\"ant-upload-drag-icon\">\n                                    <Icon type=\"inbox\" />\n                                </p>\n                                <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n                                <p className=\"ant-upload-hint\">Support for a single or bulk upload.</p>\n                            </Upload.Dragger>,\n                        )}\n                    </div>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const CreatePostForm = Form.create()(NormalCreatePostForm);\n","import React from 'react';\nimport { Modal, Button, message } from 'antd';\nimport { CreatePostForm } from './CreatePostForm';\nimport { API_ROOT, AUTH_HEADER, TOKEN_KEY, POS_KEY, LOC_SHAKE, TOPIC_AROUND } from '../constants';\n\nexport class CreatePostButton extends React.Component {\n    state = {\n        visible: false,\n        confirmLoading: false,\n    };\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    handleOk = () => {\n        this.form.validateFields((err, values) => {\n            console.log(values);\n            if (!err) {\n                const token = localStorage.getItem(TOKEN_KEY);\n                const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n\n                const formData = new FormData();\n                formData.set('lat', lat + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n                formData.set('lon', lon + Math.random() * LOC_SHAKE * 2 - LOC_SHAKE);\n                formData.set('message', values.message);\n                formData.set('image', values.image[0].originFileObj);\n\n                this.setState({ confirmLoading: true });\n                fetch(`${API_ROOT}/post`, {\n                    method: 'POST',\n                    headers: {\n                        Authorization: `${AUTH_HEADER} ${token}`\n                    },\n                    body: formData,\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return this.props.loadPostsByTopic();\n                        }\n                        throw new Error('Failed to create post.');\n                    })\n                    .then(() => {\n                        this.setState({ visible: false, confirmLoading: false });\n                        this.form.resetFields();\n                        message.success('Post created successfully!');\n                    })\n                    .catch((e) => {\n                        console.error(e);\n                        message.error('Failed to create post.');\n                        this.setState({ confirmLoading: false });\n                    });\n            }\n        });\n    };\n\n    handleCancel = () => {\n        console.log('Clicked cancel button');\n        this.setState({\n            visible: false,\n        });\n    };\n\n    getFormRef = (formInstance) => {\n        this.form = formInstance;\n    }\n\n    render() {\n        const { visible, confirmLoading } = this.state;\n        return (\n            <div>\n                <Button type=\"primary\" onClick={this.showModal}>\n                    Create New Post\n                </Button>\n                <Modal\n                    title=\"Create New Post\"\n                    visible={visible}\n                    onOk={this.handleOk}\n                    okText='Create'\n                    confirmLoading={confirmLoading}\n                    onCancel={this.handleCancel}\n                >\n                    <CreatePostForm ref={this.getFormRef}/>\n                </Modal>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Marker, InfoWindow } from 'react-google-maps';\nimport PropTypes from 'prop-types';\nimport blueMarkerUrl from '../assets/images/blue-marker.svg';\n\nexport class AroundMarker extends React.Component {\n    static propTypes = {\n        post: PropTypes.object.isRequired,\n    }\n\n    state = {\n        isOpen: false,\n    }\n\n    handleToggle = () => {\n        this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\n    }\n\n    render() {\n        const { user, message, url, location, type } = this.props.post;\n        const { lat, lon } = location;\n        const isImagePost = type === 'image';\n        const customIcon = isImagePost ? undefined : {\n            url: blueMarkerUrl,\n            scaledSize: new window.google.maps.Size(26, 41),\n        };\n        return (\n            <Marker\n                position={{ lat, lng: lon }}\n                onMouseOver={isImagePost ? this.handleToggle : undefined}\n                onMouseOut={isImagePost ? this.handleToggle : undefined}\n                onClick={isImagePost ? undefined: this.handleToggle}\n                icon={customIcon}\n            >\n                {this.state.isOpen ? (\n                    <InfoWindow>\n                        <div>\n                            {isImagePost\n                                ? <img src={url} alt={message} className=\"around-marker-image\"/>\n                                : <video src={url} controls className=\"around-marker-video\"/>}\n                            <p>{`${user}: ${message}`}</p>\n                        </div>\n                    </InfoWindow>\n                ) : null}\n            </Marker>\n        );\n    }\n}\n\n","import React from 'react';\nimport {\n    withScriptjs,\n    withGoogleMap,\n    GoogleMap,\n} from \"react-google-maps\";\nimport { AroundMarker } from './AroundMarker';\nimport { POS_KEY } from '../constants';\n\nclass NormalAroundMap extends React.Component {\n    reloadMarker = () => {\n        const center = this.getCenter();\n        const radius = this.getRadius();\n        this.props.loadPostsByTopic(center, radius);\n    }\n\n    getCenter() {\n        const center = this.map.getCenter();\n        return { lat: center.lat(), lon: center.lng() };\n    }\n\n    getRadius() {\n        const center = this.map.getCenter();\n        const bounds = this.map.getBounds();\n        if (center && bounds) {\n            const ne = bounds.getNorthEast();\n            const right = new window.google.maps.LatLng(center.lat(), ne.lng());\n            return 0.001 * window.google.maps.geometry.spherical.computeDistanceBetween(center, right);\n        }\n    }\n\n\n    getMapRef = (mapInstance) => {\n        this.map = mapInstance;\n        window.map = mapInstance;\n    }\n\n    render() {\n        const { lat, lon } = JSON.parse(localStorage.getItem(POS_KEY));\n        return (\n            <GoogleMap\n                ref={this.getMapRef}\n                defaultZoom={11}\n                defaultCenter={{ lat, lng: lon }}\n                onDragEnd={this.reloadMarker}\n                onZoomChanged={this.reloadMarker}\n            >\n                {this.props.posts.map((post) => <AroundMarker post={post} key={post.url} />)}\n            </GoogleMap>\n        );\n    }\n}\n\nexport const AroundMap = withScriptjs(withGoogleMap(NormalAroundMap));","import React from 'react';\nimport { Tabs, Spin, Row, Col, Radio } from 'antd';\nimport {\n    GEO_OPTIONS,\n    POS_KEY,\n    API_ROOT,\n    AUTH_HEADER,\n    TOKEN_KEY,\n    POST_TYPE_IMAGE,\n    POST_TYPE_VIDEO,\n    POST_TYPE_UNKNOWN,\n    TOPIC_AROUND,\n    TOPIC_FACE,\n} from '../constants';\nimport { Gallery } from './Gallery';\nimport { CreatePostButton } from './CreatePostButton';\nimport { AroundMap } from './AroundMap';\n\nconst { TabPane } = Tabs;\n\nexport class Home extends React.Component {\n    state = {\n        isLoadingGeoLocation: false,\n        isLoadingPosts: false,\n        error: '',\n        posts: [],\n        topic: TOPIC_AROUND,\n    }\n\n    componentDidMount() {\n        if (\"geolocation\" in navigator) {\n            this.setState({ isLoadingGeoLocation: true, error: '' });\n            navigator.geolocation.getCurrentPosition(\n                this.onSuccessLoadGeoLocation,\n                this.onFailedLoadGeoLocation,\n                GEO_OPTIONS,\n            );\n        } else {\n            this.setState({ error: 'Geolocation is not supported.'});\n        }\n    }\n\n    onSuccessLoadGeoLocation = (position) => {\n        console.log(position);\n        const { latitude, longitude } = position.coords;\n        localStorage.setItem(POS_KEY, JSON.stringify({ lat: latitude, lon: longitude }));\n        this.setState({ isLoadingGeoLocation: false, error: '' });\n        this.loadNearbyPosts();\n    }\n\n    onFailedLoadGeoLocation = () => {\n        this.setState({ isLoadingGeoLocation: false, error: 'Failed to load geo location.' });\n    }\n\n    loadNearbyPosts = (center, radius) => {\n        const { lat, lon } = center ? center : JSON.parse(localStorage.getItem(POS_KEY));\n        const range = radius ? radius : 20;\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({ isLoadingPosts: true, error: '' });\n        return fetch(`${API_ROOT}/search?lat=${lat}&lon=${lon}&range=${range}`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`,\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error('Failed to load posts.');\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\n            })\n            .catch((e) => {\n                console.error(e);\n                this.setState({ isLoadingPosts: false, error: e.message });\n            });\n    }\n\n    renderImagePosts() {\n        const { posts } = this.state;\n        const images = posts\n            .filter((post) => post.type === POST_TYPE_IMAGE)\n            .map((post) => {\n                return {\n                    user: post.user,\n                    src: post.url,\n                    thumbnail: post.url,\n                    caption: post.message,\n                    thumbnailWidth: 400,\n                    thumbnailHeight: 300,\n                };\n            });\n        return <Gallery images={images}/>\n    }\n\n    renderVideoPosts() {\n        const { posts } = this.state;\n        return (\n            <Row gutter={30}>\n                {\n                    posts\n                        .filter((post) => [POST_TYPE_VIDEO, POST_TYPE_UNKNOWN].includes(post.type))\n                        .map((post) => (\n                            <Col span={6} key={post.url}>\n                                <video src={post.url} controls={true} className=\"video-block\"/>\n                                <p>{post.user}: {post.message}</p>\n                            </Col>\n                        ))\n                }\n            </Row>\n        );\n    }\n\n    renderPosts(type) {\n        const { error, isLoadingGeoLocation, isLoadingPosts, posts } = this.state;\n        if (error) {\n            return error;\n        } else if (isLoadingGeoLocation) {\n            return <Spin tip=\"Loading geo location...\"/>;\n        } else if (isLoadingPosts) {\n            return <Spin tip=\"Loading posts...\"/>\n        } else if (posts.length > 0) {\n            return type === POST_TYPE_IMAGE ? this.renderImagePosts() : this.renderVideoPosts();\n        } else {\n            return 'No nearby posts';\n        }\n    }\n\n    handleTopicChange = (e) => {\n        const topic = e.target.value;\n        this.setState({ topic });\n        if (topic === TOPIC_AROUND) {\n            this.loadNearbyPosts();\n        } else {\n            this.loadFacesAroundTheWolrd();\n        }\n    }\n\n    loadFacesAroundTheWolrd = () => {\n        const token = localStorage.getItem(TOKEN_KEY);\n        this.setState({ isLoadingPosts: true, error: '' });\n        return fetch(`${API_ROOT}/cluster?term=face`, {\n            method: 'GET',\n            headers: {\n                Authorization: `${AUTH_HEADER} ${token}`,\n            }\n        })\n            .then((response) => {\n                if (response.ok) {\n                    return response.json();\n                }\n                throw new Error('Failed to load posts');\n            })\n            .then((data) => {\n                console.log(data);\n                this.setState({ posts: data ? data : [], isLoadingPosts: false });\n            })\n            .catch((e) => {\n                console.error(e);\n                this.setState({ isLoadingPosts: false , error: e.message });\n            });\n    }\n\n    loadPostsByTopic = (center, radius) => {\n        if (this.state.topic === TOPIC_AROUND) {\n            return this.loadNearbyPosts(center, radius);\n        } else {\n            return this.loadFacesAroundTheWolrd();\n        }\n    }\n\n    render() {\n        const operations = (\n            <CreatePostButton loadPostsByTopic={this.loadPostsByTopic}/>\n        );\n        return (\n            <div>\n                <Radio.Group onChange={this.handleTopicChange} value={this.state.topic}>\n                    <Radio value={TOPIC_AROUND}>Posts Around Me</Radio>\n                    <Radio value={TOPIC_FACE}>Faces Around The World</Radio>\n                </Radio.Group>\n                <Tabs tabBarExtraContent={operations} className=\"main-tabs\">\n                    <TabPane tab=\"Image Posts\" key=\"1\">\n                        {this.renderPosts(POST_TYPE_IMAGE)}\n                    </TabPane>\n                    <TabPane tab=\"Video Posts\" key=\"2\">\n                        {this.renderPosts(POST_TYPE_VIDEO)}\n                    </TabPane>\n                    <TabPane tab=\"Map\" key=\"3\">\n                        <AroundMap\n                            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyD3CEh9DXuyjozqptVB5LA-dN7MxWWkr9s&v=3.exp&libraries=geometry,drawing,places\"\n                            loadingElement={<div style={{ height: `100%` }} />}\n                            containerElement={<div style={{ height: `600px` }} />}\n                            mapElement={<div style={{ height: `100%` }} />}\n                            posts={this.state.posts}\n                            loadPostsByTopic={this.loadPostsByTopic}\n                        />\n                    </TabPane>\n                </Tabs>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { Register } from './Register';\nimport { Login } from './Login';\nimport { Home } from './Home';\nimport { Switch, Route, Redirect } from 'react-router'\n\nexport class Main extends React.Component {\n    getLogin = () => {\n        return this.props.isLoggedIn ? <Redirect to=\"/home\"/> : <Login handleLoginSucceed={this.props.handleLoginSucceed}/>;\n    }\n\n    getHome = () => {\n        return this.props.isLoggedIn ? <Home/> : <Redirect to=\"/login\"/>;\n    }\n    render() {\n        return (\n            <div className=\"main\">\n                <Switch>\n                    <Route exact path=\"/\" render={this.getLogin}/>\n                    <Route path=\"/login\" render={this.getLogin}/>\n                    <Route path=\"/register\" component={Register}/>\n                    <Route path=\"/home\" render={this.getHome}/>\n                    <Route render={this.getLogin}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { TopBar } from './TopBar';\nimport { Main } from './Main';\nimport { TOKEN_KEY } from '../constants';\n\nimport '../styles/App.css';\n\nclass App extends React.Component {\n    state = {\n        isLoggedIn: Boolean(localStorage.getItem(TOKEN_KEY)),\n    }\n\n    handleLoginSucceed = (token) => {\n        localStorage.setItem(TOKEN_KEY, token)\n        this.setState({ isLoggedIn: true });\n    }\n\n    handleLogout = () => {\n        localStorage.removeItem(TOKEN_KEY);\n        this.setState({ isLoggedIn: false });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <TopBar handleLogout={this.handleLogout} isLoggedIn={this.state.isLoggedIn}/>\n                <Main handleLoginSucceed={this.handleLoginSucceed} isLoggedIn={this.state.isLoggedIn}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}