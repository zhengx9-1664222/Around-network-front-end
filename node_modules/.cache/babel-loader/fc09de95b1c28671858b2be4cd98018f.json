{"ast":null,"code":"var _jsxFileName = \"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/src/components/Register.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch(`${API_ROOT}/signup`, {\n            method: 'POST',\n            body: JSON.stringify({\n              username: values.username,\n              password: values.password\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.text();\n            }\n\n            throw new Error(response.statusText);\n          }).then(data => {\n            console.log('===== ', data);\n            message.success('Registration succeed!');\n          }).catch(err => {\n            console.error(err);\n            message.error('Registration failed.');\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Register\")));\n  }\n\n}\n\nexport const Register = Form.create({\n  name: 'register'\n})(RegistrationForm);","map":{"version":3,"sources":["/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/src/components/Register.js"],"names":["React","Component","Form","Input","Button","message","API_ROOT","RegistrationForm","state","confirmDirty","autoCompleteResult","handleConfirmBlur","e","value","target","setState","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","handleSubmit","preventDefault","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","success","catch","error","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","validator","Register","create","name"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/signup`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.statusText);\n                    })\n                    .then((data) => {\n                        console.log('===== ',data);\n                        message.success('Registration succeed!');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Registration failed.');\n                    });\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    {/*<p>I already have an account, go back to <Link to=\"/login\">login</Link></p>*/}\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);"]},"metadata":{},"sourceType":"module"}