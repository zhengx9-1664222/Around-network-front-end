{"ast":null,"code":"var _jsxFileName = \"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/src/components/Register.js\";\nimport React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          fetch(`${API_ROOT}/signup`, {\n            method: 'POST',\n            body: JSON.stringify({\n              username: values.username,\n              password: values.password\n            })\n          }).then(response => {\n            if (response.ok) {\n              return response.text();\n            }\n\n            throw new Error(response.statusText);\n          }).then(data => {\n            console.log(data);\n            message.success('Registration succeed!');\n            this.props.history.push('/login');\n          }).catch(err => {\n            console.error(err);\n            message.error('Registration failed.');\n          });\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      rules: [{\n        required: true,\n        message: 'Please input your username!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"I already have an account, go back to \", React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"login\"))));\n  }\n\n}\n\nexport const Register = Form.create({\n  name: 'register'\n})(RegistrationForm);","map":{"version":3,"sources":["/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/src/components/Register.js"],"names":["React","Form","Input","Button","message","Link","API_ROOT","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","success","history","push","catch","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","render","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","validator","Register","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/signup`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.statusText);\n                    })\n                    .then((data) => {\n                        console.log(data);\n                        message.success('Registration succeed!');\n                        this.props.history.push('/login');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Registration failed.');\n                    });\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\n"]},"metadata":{},"sourceType":"module"}