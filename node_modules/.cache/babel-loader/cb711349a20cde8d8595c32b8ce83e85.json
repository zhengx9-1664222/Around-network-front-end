{"ast":null,"code":"import _classCallCheck from\"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{Form,Input,Button,message}from'antd';import{Link}from'react-router-dom';import{API_ROOT}from'../constants';var RegistrationForm=/*#__PURE__*/function(_React$Component){_inherits(RegistrationForm,_React$Component);function RegistrationForm(){var _getPrototypeOf2;var _this;_classCallCheck(this,RegistrationForm);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(RegistrationForm)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={confirmDirty:false,autoCompleteResult:[]};_this.handleSubmit=function(e){e.preventDefault();_this.props.form.validateFields(function(err,values){if(!err){console.log('Received values of form: ',values);fetch(\"\".concat(API_ROOT,\"/signup\"),{method:'POST',body:JSON.stringify({username:values.username,password:values.password})}).then(function(response){if(response.ok){return response.text();}throw new Error(response.statusText);}).then(function(data){console.log(data);message.success('Registration succeed!');_this.props.history.push('/login');}).catch(function(err){console.error(err);message.error('Registration failed.');});}});};_this.handleConfirmBlur=function(e){var value=e.target.value;_this.setState({confirmDirty:_this.state.confirmDirty||!!value});};_this.compareToFirstPassword=function(rule,value,callback){var form=_this.props.form;if(value&&value!==form.getFieldValue('password')){callback('Two passwords that you enter is inconsistent!');}else{callback();}};_this.validateToNextPassword=function(rule,value,callback){var form=_this.props.form;if(value&&_this.state.confirmDirty){form.validateFields(['confirm'],{force:true});}callback();};return _this;}_createClass(RegistrationForm,[{key:\"render\",value:function render(){var getFieldDecorator=this.props.form.getFieldDecorator;var formItemLayout={labelCol:{xs:{span:24},sm:{span:8}},wrapperCol:{xs:{span:24},sm:{span:16}}};var tailFormItemLayout={wrapperCol:{xs:{span:24,offset:0},sm:{span:16,offset:8}}};return React.createElement(Form,Object.assign({},formItemLayout,{onSubmit:this.handleSubmit,className:\"register\"}),React.createElement(Form.Item,{label:\"Username\"},getFieldDecorator('username',{rules:[{required:true,message:'Please input your username!'}]})(React.createElement(Input,null))),React.createElement(Form.Item,{label:\"Password\",hasFeedback:true},getFieldDecorator('password',{rules:[{required:true,message:'Please input your password!'},{validator:this.validateToNextPassword}]})(React.createElement(Input.Password,null))),React.createElement(Form.Item,{label:\"Confirm Password\",hasFeedback:true},getFieldDecorator('confirm',{rules:[{required:true,message:'Please confirm your password!'},{validator:this.compareToFirstPassword}]})(React.createElement(Input.Password,{onBlur:this.handleConfirmBlur}))),React.createElement(Form.Item,tailFormItemLayout,React.createElement(Button,{type:\"primary\",htmlType:\"submit\"},\"Register\"),React.createElement(\"p\",null,\"I already have an account, go back to \",React.createElement(Link,{to:\"/login\"},\"login\"))));}}]);return RegistrationForm;}(React.Component);export var Register=Form.create({name:'register'})(RegistrationForm);","map":{"version":3,"sources":["/Users/zhengxinyue/PhpstormProjects/around-web2/around-web/src/components/Register.js"],"names":["React","Form","Input","Button","message","Link","API_ROOT","RegistrationForm","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFields","err","values","console","log","fetch","method","body","JSON","stringify","username","password","then","response","ok","text","Error","statusText","data","success","history","push","catch","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","validator","Component","Register","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass RegistrationForm extends React.Component {\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/signup`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) => {\n                        if (response.ok) {\n                            return response.text();\n                        }\n                        throw new Error(response.statusText);\n                    })\n                    .then((data) => {\n                        console.log(data);\n                        message.success('Registration succeed!');\n                        this.props.history.push('/login');\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        message.error('Registration failed.');\n                    });\n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 16,\n                    offset: 8,\n                },\n            },\n        };\n\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className=\"register\">\n                <Form.Item\n                    label=\"Username\"\n                >\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(<Input />)}\n                </Form.Item>\n                <Form.Item label=\"Password\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please input your password!',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"Confirm Password\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                required: true,\n                                message: 'Please confirm your password!',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item {...tailFormItemLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Register\n                    </Button>\n                    <p>I already have an account, go back to <Link to=\"/login\">login</Link></p>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport const Register = Form.create({ name: 'register' })(RegistrationForm);\n"]},"metadata":{},"sourceType":"module"}